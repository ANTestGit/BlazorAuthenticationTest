@page "/login"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using BlazorAuthenticationTest.Controllers
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory

<h3>Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@loginModel" FormName="login-data" OnValidSubmit="@HandleLogin" style="width: 200px;">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel(){Email = AccountController.FixedEmail,Password = AccountController.FixedPassword};
    private string errorMessage;
    
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task HandleLogin()
    {
        if (loginModel.Email == AccountController.FixedEmail && loginModel.Password == AccountController.FixedPassword)
        {
            var claims = new List<Claim> { new Claim(ClaimTypes.Name, loginModel.Email) };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity));
            

            Navigation.NavigateTo("/", true);
        }
        else
        {
            errorMessage = "Invalid login attempt.";
        }
    }

    public class LoginModel
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }
    }
}